---
version: '3.4'
services:
  kafka1:
    cpus: 0.7
    image: confluentinc/cp-server:$TAG
    hostname: kafka1
    container_name: kafka1
    restart: on-failure:3
    ports:
      - 1090:1090
      - 1092:1092
      - 1093:1093
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CLIENT:PLAINTEXT,PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: CLIENT://localhost:1092,PLAINTEXT://kafka1:1093
      KAFKA_LISTENERS: CLIENT://localhost:1092,PLAINTEXT://kafka1:1093,CONTROLLER://kafka1:1094

      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:1094,2@kafka2:2094,3@kafka3:3094'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONFLUENT_CLUSTER_LINK_ENABLE: 'false'
      KAFKA_CONFLUENT_BALANCER_ENABLE: 'false'

      CONFLUENT_METRICS_ENABLE: 'false'
      KAFKA_CONFLUENT_REPORTERS_TELEMETRY_AUTO_ENABLE: 'false'
      KAFKA_CONFLUENT_SECURITY_EVENT_LOGGER_ENABLE: 'false'

      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO

      KAFKA_METRIC_REPORTERS: "io.confluent.metrics.reporter.ConfluentMetricsReporter"
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:1093,PLAINTEXT://kafka2:2093,PLAINTEXT://kafka3:3093
      CONFLUENT_METRICS_REPORTER_SECURITY_PROTOCOL: PLAINTEXT
      CONFLUENT_METRICS_REPORTER_MAX_REQUEST_SIZE: 10485760
      CONFLUENT_METRICS_REPORTER_TOPIC_CREATE: 'true'

      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schemaregistry:8081

      KAFKA_CONFLUENT_HTTP_SERVER_LISTENERS: http://kafka1:1090

      KAFKA_KAFKA_REST_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:1093,PLAINTEXT://kafka2:2093,PLAINTEXT://kafka3:3093
    volumes:
      - ./logs/kafka1:/var/lib/kafka/data/
    command: bash -c "sed -i '/KAFKA_ZOOKEEPER_CONNECT/d' /etc/confluent/docker/configure && sed -i 's/cub zk-ready/echo ignore zk-ready/' /etc/confluent/docker/ensure && /etc/confluent/docker/run"
    networks:
      example.com: {}
  
  kafka2:
    cpus: 0.7
    image: confluentinc/cp-server:$TAG
    hostname: kafka2
    container_name: kafka2
    restart: on-failure:3
    ports:
      - 2090:2090
      - 2092:2092
      - 2093:2093
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CLIENT:PLAINTEXT,PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: CLIENT://localhost:2092,PLAINTEXT://kafka2:2093
      KAFKA_LISTENERS: CLIENT://localhost:2092,PLAINTEXT://kafka2:2093,CONTROLLER://kafka2:2094

      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: 2
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:1094,2@kafka2:2094,3@kafka3:3094'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONFLUENT_CLUSTER_LINK_ENABLE: 'false'
      KAFKA_CONFLUENT_BALANCER_ENABLE: 'false'

      CONFLUENT_METRICS_ENABLE: 'false'
      KAFKA_CONFLUENT_REPORTERS_TELEMETRY_AUTO_ENABLE: 'false'
      KAFKA_CONFLUENT_SECURITY_EVENT_LOGGER_ENABLE: 'false'

      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO

      KAFKA_METRIC_REPORTERS: "io.confluent.metrics.reporter.ConfluentMetricsReporter"
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:1093,PLAINTEXT://kafka2:2093,PLAINTEXT://kafka3:3093
      CONFLUENT_METRICS_REPORTER_SECURITY_PROTOCOL: PLAINTEXT
      CONFLUENT_METRICS_REPORTER_MAX_REQUEST_SIZE: 10485760
      CONFLUENT_METRICS_REPORTER_TOPIC_CREATE: 'true'

      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schemaregistry:8081

      KAFKA_CONFLUENT_HTTP_SERVER_LISTENERS: http://kafka2:2090

      KAFKA_KAFKA_REST_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:1093,PLAINTEXT://kafka2:2093,PLAINTEXT://kafka3:3093
    volumes:
      - ./logs/kafka2:/var/lib/kafka/data/
    command: bash -c "sed -i '/KAFKA_ZOOKEEPER_CONNECT/d' /etc/confluent/docker/configure && sed -i 's/cub zk-ready/echo ignore zk-ready/' /etc/confluent/docker/ensure && /etc/confluent/docker/run"
    networks:
      example.com: {}

  kafka3:
    cpus: 0.7
    image: confluentinc/cp-server:$TAG
    hostname: kafka3
    container_name: kafka3
    restart: on-failure:3
    ports:
      - 3090:3090
      - 3092:3092
      - 3093:3093
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CLIENT:PLAINTEXT,PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: CLIENT://localhost:3092,PLAINTEXT://kafka3:3093
      KAFKA_LISTENERS: CLIENT://localhost:3092,PLAINTEXT://kafka3:3093,CONTROLLER://kafka3:3094

      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: 3
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:1094,2@kafka2:2094,3@kafka3:3094'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONFLUENT_CLUSTER_LINK_ENABLE: 'false'
      KAFKA_CONFLUENT_BALANCER_ENABLE: 'false'

      CONFLUENT_METRICS_ENABLE: 'false'
      KAFKA_CONFLUENT_REPORTERS_TELEMETRY_AUTO_ENABLE: 'false'
      KAFKA_CONFLUENT_SECURITY_EVENT_LOGGER_ENABLE: 'false'

      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO

      KAFKA_METRIC_REPORTERS: "io.confluent.metrics.reporter.ConfluentMetricsReporter"
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:1093,PLAINTEXT://kafka2:2093,PLAINTEXT://kafka3:3093
      CONFLUENT_METRICS_REPORTER_SECURITY_PROTOCOL: PLAINTEXT
      CONFLUENT_METRICS_REPORTER_MAX_REQUEST_SIZE: 10485760
      CONFLUENT_METRICS_REPORTER_TOPIC_CREATE: 'true'

      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schemaregistry:8081

      KAFKA_CONFLUENT_HTTP_SERVER_LISTENERS: http://kafka3:3090

      KAFKA_KAFKA_REST_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:1093,PLAINTEXT://kafka2:2093,PLAINTEXT://kafka3:3093
    volumes:
      - ./logs/kafka3:/var/lib/kafka/data/
    command: bash -c "sed -i '/KAFKA_ZOOKEEPER_CONNECT/d' /etc/confluent/docker/configure && sed -i 's/cub zk-ready/echo ignore zk-ready/' /etc/confluent/docker/ensure && /etc/confluent/docker/run"
    networks:
      example.com: {}


  schemaregistry:
    image: confluentinc/cp-schema-registry:$TAG
    hostname: schemaregistry
    container_name: schemaregistry
    restart: on-failure:3
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    ports:
    - 8081:8081
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schemaregistry
      SCHEMA_REGISTRY_GROUP_ID: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka1:1093,kafka2:2093,kafka3:3093'
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: INFO
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: INFO
      SCHEMA_REGISTRY_DEBUG: 'true'
    networks:
      example.com: {}

  connect:
    image: confluentinc/cp-server-connect:$TAG
    hostname: connect
    container_name: connect
    restart: always
    ports:
    - 8083:8083
    volumes:
      - "./confluent-hub-components:/usr/share/java/confluent-hub-components"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka1:1093"
      CONNECT_GROUP_ID: connect-cluster
      CONNECT_LISTENERS: "http://0.0.0.0:8083"
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-status
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REPLICATION_FACTOR: 2
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 2
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 2
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 2

      CONNECT_PLUGIN_PATH: "/usr/share/java"
      CONNECT_LOG4J_LOGGERS: org.reflections=ERROR
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO

      # Allow overriding configs on the connector level
      CONNECT_CONNECTOR_CLIENT_CONFIG_OVERRIDE_POLICY: 'All'

      CONNECT_CONFIG_PROVIDERS: 'secret'
      CONNECT_CONFIG_PROVIDERS_SECRET_CLASS: 'io.confluent.connect.secretregistry.rbac.config.provider.InternalSecretConfigProvider'
      CONNECT_CONFIG_PROVIDERS_SECRET_PARAM_MASTER_ENCRYPTION_KEY: 'password1234'
      CONNECT_CONFIG_PROVIDERS_SECRET_PARAM_KAFKASTORE_BOOTSTRAP_SERVERS: kafka1:1093
    networks:
      example.com: {}

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:$TAG
    hostname: ksqldb-server
    container_name: ksqldb-server
    restart: always
    ports:
    - 8088:8088
    environment:
      KSQL_LOG4J_ROOT_LOGLEVEL: INFO
      KSQL_KSQL_STREAMS_REPLICATION_FACTOR: 1
      KSQL_KSQL_INTERNAL_TOPIC_REPLICAS: 1

      KSQL_KSQL_STREAMS_NUM_STREAM_THREADS: 1

      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'

      KSQL_PRODUCER_ENABLE_IDEMPOTENCE: 'true'

      KSQL_BOOTSTRAP_SERVERS: kafka1:1093,kafka2:2093,kafka3:3093
      KSQL_HOST_NAME: ksqldb-server
      KSQL_KSQL_SERVICE_ID: ksqldb-cluster
      KSQL_LISTENERS: http://0.0.0.0:8088

      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schemaregistry:8081

      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
    networks:
      example.com: {}

  controlcenter:
    image: confluentinc/cp-enterprise-control-center:$TAG
    hostname: controlcenter
    container_name: controlcenter
    restart: always
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka1:1093
      CONTROL_CENTER_STREAMS_CACHE_MAX_BYTES_BUFFERING: 100000000
      CONTROL_CENTER_STREAMS_CONSUMER_REQUEST_TIMEOUT_MS: "960032"
      CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 1
      CONTROL_CENTER_REPLICATION_FACTOR: 2

      CONTROL_CENTER_REST_LISTENERS: http://0.0.0.0:9021

      CONTROL_CENTER_CONNECT_CONNECT-CLUSTER_CLUSTER: http://connect:8083
      CONTROL_CENTER_KSQL_KSQLCLUSTER_URL: http://ksqldb-server:8088
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: http://schemaregistry:8081

      CONTROL_CENTER_STREAMS_CPREST_URL: http://kafka1:1090,http://kafka2:2090,http://kafka3:3090

      CONTROL_CENTER_LOG4J_ROOT_LOGLEVEL: INFO
    networks:
      example.com: {}

networks:
  example.com:
    name: "example.com"
    driver: bridge
